@startuml
'https://plantuml.com/sequence-diagram
title: Top up Mobile

participant ClearingService
participant Portmone
participant "Core Bank (Transfer)" as CoreBank

autonumber
'hide footbox

== Clearing with Portmone ==
activate ClearingService
ClearingService -> Portmone: POST /bills.date (date=yesterday) -> PortmoneTransactionList
activate Portmone
deactivate Portmone
ClearingService -> ClearingService: getInnerTransactions(ids=[PortmoneTransactionList.id]) -> DigitalTransactionList
loop PortmoneTransaction in PortmoneTransactionList
    ClearingService -> ClearingService: getRelatedDigitalTransaction(PortmoneTransaction.transaction_Id, DigitalTransactionList) -> DigitalTransaction
    alt PortmoneTransaction.status is RETURN
        alt DigitalTransaction.status is SUCCESS
            ClearingService -> ClearingService: createRevertTransactionEvent(DigitalTransaction) -> TransactionEvent
            ClearingService -> CoreBank: sendEvent(TransactionEvent)
            ClearingService -> ClearingService: updateDigitalTransactionStatus(DigitalTransaction, status=REVERTED)
            activate CoreBank
            deactivate CoreBank
        end
    end
end loop

== Processing Lock Transactions ==
ClearingService -> ClearingService: getLockTransaction() -> LockTransactions
loop LockTransaction in LockTransactions
    ClearingService -> ClearingService: createCaptureTransactionEvent(LockTransaction) -> TransactionEvent
    ClearingService -> CoreBank: sendEvent(TransactionEvent)
    activate CoreBank
    deactivate CoreBank
end loop

== Sending paid transactions registry ==
ClearingService -> ClearingService: findPaymentOrderReport(date=yesterday) -> Report
alt Report is NOT Empty
    note over ClearingService
        We already sent report for the specific date, so stop processing
    end note
    ClearingService -> ClearingService: stopProcessing()
end

ClearingService -> ClearingService: groupPayedTransactionByPayeeId() -> PaidTransactionsGroups
loop PaidTransactions in PaidTransactionsGroups
    ClearingService -> ClearingService: createPaymentOrderReport(PaidTransactions) -> Report
    ClearingService -> Portmone: POST /bills.paymentOrder (Report) -> Result
    activate Portmone
    deactivate Portmone
    alt Result is SUCCESS
        ClearingService -> ClearingService: createPortmoneRegisterHistoryRecord(Report)
    end
end

== Daily Top Up to Bank & Portmone accounts ==
ClearingService -> Portmone: POST /bills.date (date=yesterday) -> PortmoneTransactionList
ClearingService -> ClearingService: filterPortmoneTransactionListByStatus(PortmoneTransactionList, status=PAYED) -> FilteredPortmoneTransactionList
ClearingService -> ClearingService: calculatePortmaneTotalAmount(FilteredPortmoneTransactionList) -> amount
ClearingService -> ClearingService: createTopUpPortmoneTransactionEvent(amount) -> TransactionEvent
ClearingService -> CoreBank: sendEvent(TransactionEvent)
activate CoreBank
deactivate CoreBank
ClearingService -> ClearingService: calculateBankTotalAmount(FilteredPortmoneTransactionList) -> amount
ClearingService -> ClearingService: createTopUpBankTransactionEvent(amount) -> TransactionEvent
ClearingService -> CoreBank: sendEvent(TransactionEvent)
activate CoreBank
deactivate CoreBank

note over ClearingService
    Portmone can directly contact the Bank in case we didn't pay correct amount
end note

deactivate ClearingService

@enduml